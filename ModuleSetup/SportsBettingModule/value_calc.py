########################################################################
### Class for all kind of value calculations ###
########################################################################

'''
'''

########################################################################
### modules ###
########################################################################

'''
'''

import parameter as par





########################################################################
### Class for all methods of calculating outcome probabilities ###
########################################################################
class ValueCalc(object):
    
    '''
    '''
    
    ####################################################################
    ### Initialization ###
    ####################################################################
    def __init__(self):
        
        '''
        '''
        
        pass
        
        
        
        
        
    ####################################################################
    ### Result based value calculation ###
    ####################################################################
    def result_based(self,res_prob):
        
        '''
        Calculates the probability for a given outcome of a game. 
        '''
        
        
        
        
        ################################################################
        ### dicts, lists, parameters ###
        ################################################################
        
        '''
        Define dicts and lists
        '''
        
        #parameter
        outcomes = par.outcomes
        
        #dict
        value    = {}
        
        
        
        
        
        ################################################################
        ### Calculate value  ###
        ################################################################
        
        '''
        Calculates the prob for all game outcomes.
        '''
        
        #expected outcome probability = mean probability
        for outcome in outcomes:
            value[outcome] = (
            res_prob['home'][outcome] + res_prob['away'][outcome])/2
         
        #return value
        return value
        
        
        
        
        
    ####################################################################
    ### ###
    ####################################################################
    def goal_based(self):
        
        '''
        '''
        
        pass
        
    ####################################################################
    ### ###
    ####################################################################
    def simple_goal_based(self):
        
        '''
        '''
        
        pass
        
    ####################################################################
    ### ###
    ####################################################################
    def double_goal_based(self):
        
        '''
        '''
        
        pass
        
    ####################################################################
    ### ###
    ####################################################################
    def league_based(self):
        
        '''
        '''
        
        pass
        
        
    
